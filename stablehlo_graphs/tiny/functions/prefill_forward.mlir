module @IrToHlo.784 attributes {mhlo.cross_program_prefetches = [], mhlo.is_dynamic = false, mhlo.use_auto_spmd_partitioning = false} {
  func.func @main(%arg0: tensor<32000x128xf32>, %arg1: tensor<128xf32>, %arg2: tensor<f32>, %arg3: tensor<128x352xf32>, %arg4: tensor<352x128xf32>, %arg5: tensor<128xf32>, %arg6: tensor<128x128xf32>, %arg7: tensor<2048xi64>, %arg8: tensor<128x128xf32>, %arg9: tensor<128xf32>, %arg10: tensor<128x352xf32>, %arg11: tensor<352x128xf32>, %arg12: tensor<128xf32>, %arg13: tensor<128x128xf32>, %arg14: tensor<128x128xf32>, %arg15: tensor<128xf32>, %arg16: tensor<128x352xf32>, %arg17: tensor<352x128xf32>, %arg18: tensor<128xf32>, %arg19: tensor<128x128xf32>, %arg20: tensor<128x128xf32>, %arg21: tensor<128xf32>, %arg22: tensor<2048xi64>, %arg23: tensor<32000x128xf32>, %arg24: tensor<2048xi64>, %arg25: tensor<i64>, %arg26: tensor<2304x2x64xf32>, %arg27: tensor<f32>, %arg28: tensor<f32>, %arg29: tensor<4608x32xcomplex<f32>>, %arg30: tensor<128x128xf32>, %arg31: tensor<2304x2x64xf32>, %arg32: tensor<128x128xf32>, %arg33: tensor<352x128xf32>, %arg34: tensor<2304x2x64xf32>, %arg35: tensor<128x128xf32>, %arg36: tensor<2304x2x64xf32>, %arg37: tensor<128x128xf32>, %arg38: tensor<352x128xf32>, %arg39: tensor<2304x2x64xf32>, %arg40: tensor<128x128xf32>, %arg41: tensor<2304x2x64xf32>, %arg42: tensor<128x128xf32>, %arg43: tensor<352x128xf32>) -> (tensor<2048x32000xf32>, tensor<2304x2x64xf32>, tensor<2304x2x64xf32>, tensor<2304x2x64xf32>, tensor<2304x2x64xf32>, tensor<2304x2x64xf32>, tensor<2304x2x64xf32>) {
    %0 = stablehlo.constant dense<7.812500e-03> : tensor<2048xf32>
    %1 = stablehlo.constant dense<2.000000e+00> : tensor<2048x128xf32>
    %2 = stablehlo.constant dense<0> : tensor<2048xi64>
    %3 = stablehlo.constant dense<0.000000e+00> : tensor<1x1x2048x2048xf32>
    %4 = stablehlo.constant dense<1> : tensor<2048x2048xi64>
    %5 = stablehlo.constant dense<"tensor<2048xi64>
    %6 = stablehlo.constant dense<0xFF800000> : tensor<f32>
    %7 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %8 = stablehlo.convert %arg22 : (tensor<2048xi64>) -> tensor<2048xui32>
    %9 = "stablehlo.gather"(%arg23, %8) {dimension_numbers = #stablehlo.gather<offset_dims = [1], collapsed_slice_dims = [0], start_index_map = [0], index_vector_dim = 1>, indices_are_sorted = false, slice_sizes = dense<[1, 128]> : tensor<2xi64>} : (tensor<32000x128xf32>, tensor<2048xui32>) -> tensor<2048x128xf32>
    %10 = stablehlo.power %9, %1 : tensor<2048x128xf32>
    %11 = stablehlo.reduce(%10 init: %7) across dimensions = [1] : (tensor<2048x128xf32>, tensor<f32>) -> tensor<2048xf32>
     reducer(%arg44: tensor<f32>, %arg45: tensor<f32>)  {
      %364 = stablehlo.add %arg44, %arg45 : tensor<f32>
      stablehlo.return %364 : tensor<f32>
    }
    %12 = stablehlo.multiply %11, %0 : tensor<2048xf32>
    %13 = stablehlo.reshape %12 : (tensor<2048xf32>) -> tensor<2048x1xf32>
    %14 = stablehlo.broadcast_in_dim %arg2, dims = [] : (tensor<f32>) -> tensor<2048x1xf32>
    %15 = stablehlo.add %13, %14 : tensor<2048x1xf32>
    %16 = stablehlo.rsqrt %15 : tensor<2048x1xf32>
    %17 = stablehlo.reshape %16 : (tensor<2048x1xf32>) -> tensor<2048xf32>
    %18 = stablehlo.broadcast_in_dim %17, dims = [0] : (tensor<2048xf32>) -> tensor<2048x128xf32>
    %19 = stablehlo.multiply %9, %18 : tensor<2048x128xf32>
    %20 = stablehlo.broadcast_in_dim %arg21, dims = [1] : (tensor<128xf32>) -> tensor<2048x128xf32>
    %21 = stablehlo.multiply %19, %20 : tensor<2048x128xf32>
    %22 = stablehlo.transpose %arg32, dims = [1, 0] {result_layout = dense<[0, 1]> : tensor<2xindex>, xla_shape = "f32[128,128]{0,1}"} : (tensor<128x128xf32>) -> tensor<128x128xf32>
    %23 = stablehlo.dot %21, %22, precision = [DEFAULT, DEFAULT] : (tensor<2048x128xf32>, tensor<128x128xf32>) -> tensor<2048x128xf32>
    %24 = stablehlo.reshape %23 : (tensor<2048x128xf32>) -> tensor<2048x2x32x2xf32>
    %25 = stablehlo.slice %24 [0:2048, 0:2, 0:32, 0:1] : (tensor<2048x2x32x2xf32>) -> tensor<2048x2x32x1xf32>
    %26 = stablehlo.reshape %25 : (tensor<2048x2x32x1xf32>) -> tensor<2048x2x32xf32>
    %27 = stablehlo.slice %24 [0:2048, 0:2, 0:32, 1:2] : (tensor<2048x2x32x2xf32>) -> tensor<2048x2x32x1xf32>
    %28 = stablehlo.reshape %27 : (tensor<2048x2x32x1xf32>) -> tensor<2048x2x32xf32>
    %29 = stablehlo.complex %26, %28 : tensor<2048x2x32xcomplex<f32>>
    %30 = stablehlo.convert %arg24 : (tensor<2048xi64>) -> tensor<2048xui32>
    %31 = "stablehlo.gather"(%arg29, %30) {dimension_numbers = #stablehlo.gather<offset_dims = [1], collapsed_slice_dims = [0], start_index_map = [0], index_vector_dim = 1>, indices_are_sorted = false, slice_sizes = dense<[1, 32]> : tensor<2xi64>} : (tensor<4608x32xcomplex<f32>>, tensor<2048xui32>) -> tensor<2048x32xcomplex<f32>>
    %32 = stablehlo.broadcast_in_dim %31, dims = [0, 2] : (tensor<2048x32xcomplex<f32>>) -> tensor<2048x2x32xcomplex<f32>>
    %33 = stablehlo.multiply %29, %32 : tensor<2048x2x32xcomplex<f32>>
    %34 = stablehlo.real %33 : (tensor<2048x2x32xcomplex<f32>>) -> tensor<2048x2x32xf32>
    %35 = stablehlo.reshape %34 : (tensor<2048x2x32xf32>) -> tensor<2048x2x32x1xf32>
    %36 = stablehlo.imag %33 : (tensor<2048x2x32xcomplex<f32>>) -> tensor<2048x2x32xf32>
    %37 = stablehlo.reshape %36 : (tensor<2048x2x32xf32>) -> tensor<2048x2x32x1xf32>
    %38 = stablehlo.concatenate %35, %37, dim = 3 : (tensor<2048x2x32x1xf32>, tensor<2048x2x32x1xf32>) -> tensor<2048x2x32x2xf32>
    %39 = stablehlo.reshape %38 : (tensor<2048x2x32x2xf32>) -> tensor<2048x2x64xf32>
    %40 = stablehlo.transpose %39, dims = [1, 0, 2] {result_layout = dense<[2, 0, 1]> : tensor<3xindex>, xla_shape = "f32[2,2048,64]{2,0,1}"} : (tensor<2048x2x64xf32>) -> tensor<2x2048x64xf32>
    %41 = stablehlo.compare  LT, %arg24, %2 : (tensor<2048xi64>, tensor<2048xi64>) -> tensor<2048xi1>
    %42 = stablehlo.broadcast_in_dim %arg25, dims = [] : (tensor<i64>) -> tensor<2048xi64>
    %43 = stablehlo.add %arg24, %42 : tensor<2048xi64>
    %44 = stablehlo.select %41, %43, %arg24 : tensor<2048xi1>, tensor<2048xi64>
    %45 = stablehlo.reshape %44 : (tensor<2048xi64>) -> tensor<2048x1xi64>
    %46 = stablehlo.transpose %arg30, dims = [1, 0] {result_layout = dense<[0, 1]> : tensor<2xindex>, xla_shape = "f32[128,128]{0,1}"} : (tensor<128x128xf32>) -> tensor<128x128xf32>
    %47 = stablehlo.dot %21, %46, precision = [DEFAULT, DEFAULT] : (tensor<2048x128xf32>, tensor<128x128xf32>) -> tensor<2048x128xf32>
    %48 = stablehlo.reshape %47 : (tensor<2048x128xf32>) -> tensor<2048x2x32x2xf32>
    %49 = stablehlo.slice %48 [0:2048, 0:2, 0:32, 0:1] : (tensor<2048x2x32x2xf32>) -> tensor<2048x2x32x1xf32>
    %50 = stablehlo.reshape %49 : (tensor<2048x2x32x1xf32>) -> tensor<2048x2x32xf32>
    %51 = stablehlo.slice %48 [0:2048, 0:2, 0:32, 1:2] : (tensor<2048x2x32x2xf32>) -> tensor<2048x2x32x1xf32>
    %52 = stablehlo.reshape %51 : (tensor<2048x2x32x1xf32>) -> tensor<2048x2x32xf32>
    %53 = stablehlo.complex %50, %52 : tensor<2048x2x32xcomplex<f32>>
    %54 = stablehlo.broadcast_in_dim %31, dims = [0, 2] : (tensor<2048x32xcomplex<f32>>) -> tensor<2048x2x32xcomplex<f32>>
    %55 = stablehlo.multiply %53, %54 : tensor<2048x2x32xcomplex<f32>>
    %56 = stablehlo.real %55 : (tensor<2048x2x32xcomplex<f32>>) -> tensor<2048x2x32xf32>
    %57 = stablehlo.reshape %56 : (tensor<2048x2x32xf32>) -> tensor<2048x2x32x1xf32>
    %58 = stablehlo.imag %55 : (tensor<2048x2x32xcomplex<f32>>) -> tensor<2048x2x32xf32>
    %59 = stablehlo.reshape %58 : (tensor<2048x2x32xf32>) -> tensor<2048x2x32x1xf32>
    %60 = stablehlo.concatenate %57, %59, dim = 3 : (tensor<2048x2x32x1xf32>, tensor<2048x2x32x1xf32>) -> tensor<2048x2x32x2xf32>
    %61 = stablehlo.reshape %60 : (tensor<2048x2x32x2xf32>) -> tensor<2048x2x64xf32>
    %62 = "stablehlo.scatter"(%arg31, %45, %61) ({
    ^bb0(%arg44: tensor<f32>, %arg45: tensor<f32>):
      stablehlo.return %arg45 : tensor<f32>
    }) {indices_are_sorted = false, scatter_dimension_numbers = #stablehlo.scatter<update_window_dims = [1, 2], inserted_window_dims = [0], scatter_dims_to_operand_dims = [0], index_vector_dim = 1>, unique_indices = false} : (tensor<2304x2x64xf32>, tensor<2048x1xi64>, tensor<2048x2x64xf32>) -> tensor<2304x2x64xf32>
    %63 = stablehlo.convert %arg7 : (tensor<2048xi64>) -> tensor<2048xui32>
    %64 = "stablehlo.gather"(%62, %63) {dimension_numbers = #stablehlo.gather<offset_dims = [1, 2], collapsed_slice_dims = [0], start_index_map = [0], index_vector_dim = 1>, indices_are_sorted = false, slice_sizes = dense<[1, 2, 64]> : tensor<3xi64>} : (tensor<2304x2x64xf32>, tensor<2048xui32>) -> tensor<2048x2x64xf32>
    %65 = stablehlo.transpose %64, dims = [1, 2, 0] : (tensor<2048x2x64xf32>) -> tensor<2x64x2048xf32>
    %66 = stablehlo.dot_general %40, %65, batching_dims = [0] x [0], contracting_dims = [2] x [1], precision = [DEFAULT, DEFAULT] : (tensor<2x2048x64xf32>, tensor<2x64x2048xf32>) -> tensor<2x2048x2048xf32>
    %67 = stablehlo.broadcast_in_dim %arg28, dims = [] : (tensor<f32>) -> tensor<2x2048x2048xf32>
    %68 = stablehlo.divide %66, %67 : tensor<2x2048x2048xf32>
    %69 = stablehlo.reshape %68 : (tensor<2x2048x2048xf32>) -> tensor<1x2x2048x2048xf32>
    %70 = stablehlo.broadcast_in_dim %5, dims = [1] : (tensor<2048xi64>) -> tensor<2048x2048xi64>
    %71 = stablehlo.broadcast_in_dim %5, dims = [0] : (tensor<2048xi64>) -> tensor<2048x2048xi64>
    %72 = stablehlo.subtract %70, %71 : tensor<2048x2048xi64>
    %73 = stablehlo.compare  GE, %72, %4 : (tensor<2048x2048xi64>, tensor<2048x2048xi64>) -> tensor<2048x2048xi1>
    %74 = stablehlo.reshape %73 : (tensor<2048x2048xi1>) -> tensor<1x1x2048x2048xi1>
    %75 = stablehlo.reshape %arg27 : (tensor<f32>) -> tensor<1x1xf32>
    %76 = stablehlo.broadcast_in_dim %75, dims = [0, 1] : (tensor<1x1xf32>) -> tensor<1x1x2048x2048xf32>
    %77 = stablehlo.select %74, %76, %3 : tensor<1x1x2048x2048xi1>, tensor<1x1x2048x2048xf32>
    %78 = stablehlo.reshape %77 : (tensor<1x1x2048x2048xf32>) -> tensor<1x2048x2048xf32>
    %79 = stablehlo.broadcast_in_dim %78, dims = [0, 2, 3] : (tensor<1x2048x2048xf32>) -> tensor<1x2x2048x2048xf32>
    %80 = stablehlo.add %69, %79 : tensor<1x2x2048x2048xf32>
    %81 = stablehlo.reduce(%80 init: %6) across dimensions = [3] : (tensor<1x2x2048x2048xf32>, tensor<f32>) -> tensor<1x2x2048xf32>
     reducer(%arg44: tensor<f32>, %arg45: tensor<f32>)  {
      %364 = stablehlo.maximum %arg44, %arg45 : tensor<f32>
      stablehlo.return %364 : tensor<f32>
    }
    %82 = stablehlo.broadcast_in_dim %81, dims = [0, 1, 2] : (tensor<1x2x2048xf32>) -> tensor<1x2x2048x2048xf32>
    %83 = stablehlo.subtract %80, %82 : tensor<1x2x2048x2048xf32>
    %84 = stablehlo.exponential %83 : tensor<1x2x2048x2048xf32>
    %85 = stablehlo.reduce(%84 init: %7) across dimensions = [3] : (tensor<1x2x2048x2048xf32>, tensor<f32>) -> tensor<1x2x2048xf32>
     reducer(%arg44: tensor<f32>, %arg45: tensor<f32>)  {
      %364 = stablehlo.add %arg44, %arg45 : tensor<f32>
      stablehlo.return %364 : tensor<f32>
    }
    %86 = stablehlo.broadcast_in_dim %85, dims = [0, 1, 2] : (tensor<1x2x2048xf32>) -> tensor<1x2x2048x2048xf32>
    %87 = stablehlo.divide %84, %86 : tensor<1x2x2048x2048xf32>
    %88 = stablehlo.reshape %87 : (tensor<1x2x2048x2048xf32>) -> tensor<2x2048x2048xf32>
    %89 = stablehlo.compare  LT, %arg24, %2 : (tensor<2048xi64>, tensor<2048xi64>) -> tensor<2048xi1>
    %90 = stablehlo.broadcast_in_dim %arg25, dims = [] : (tensor<i64>) -> tensor<2048xi64>
    %91 = stablehlo.add %arg24, %90 : tensor<2048xi64>
    %92 = stablehlo.select %89, %91, %arg24 : tensor<2048xi1>, tensor<2048xi64>
    %93 = stablehlo.reshape %92 : (tensor<2048xi64>) -> tensor<2048x1xi64>
    %94 = stablehlo.transpose %arg20, dims = [1, 0] {result_layout = dense<[0, 1]> : tensor<2xindex>, xla_shape = "f32[128,128]{0,1}"} : (tensor<128x128xf32>) -> tensor<128x128xf32>
    %95 = stablehlo.dot %21, %94, precision = [DEFAULT, DEFAULT] : (tensor<2048x128xf32>, tensor<128x128xf32>) -> tensor<2048x128xf32>
    %96 = stablehlo.reshape %95 : (tensor<2048x128xf32>) -> tensor<2048x2x64xf32>
    %97 = "stablehlo.scatter"(%arg26, %93, %96) ({
    ^bb0(%arg44: tensor<f32>, %arg45: tensor<f32>):
      stablehlo.return %arg45 : tensor<f32>
    }) {indices_are_sorted = false, scatter_dimension_numbers = #stablehlo.scatter<update_window_dims = [1, 2], inserted_window_dims = [0], scatter_dims_to_operand_dims = [0], index_vector_dim = 1>, unique_indices = false} : (tensor<2304x2x64xf32>, tensor<2048x1xi64>, tensor<2048x2x64xf32>) -> tensor<2304x2x64xf32>
    %98 = stablehlo.convert %arg7 : (tensor<2048xi64>) -> tensor<2048xui32>
    %99 = "stablehlo.gather"(%97, %98) {dimension_numbers = #stablehlo.gather<offset_dims = [1, 2], collapsed_slice_dims = [0], start_index_map = [0], index_vector_dim = 1>, indices_are_sorted = false, slice_sizes = dense<[1, 2, 64]> : tensor<3xi64>} : (tensor<2304x2x64xf32>, tensor<2048xui32>) -> tensor<2048x2x64xf32>
    %100 = stablehlo.transpose %99, dims = [1, 0, 2] {result_layout = dense<[2, 0, 1]> : tensor<3xindex>, xla_shape = "f32[2,2048,64]{2,0,1}"} : (tensor<2048x2x64xf32>) -> tensor<2x2048x64xf32>
    %101 = stablehlo.dot_general %88, %100, batching_dims = [0] x [0], contracting_dims = [2] x [1], precision = [DEFAULT, DEFAULT] : (tensor<2x2048x2048xf32>, tensor<2x2048x64xf32>) -> tensor<2x2048x64xf32>
    %102 = stablehlo.reshape %101 : (tensor<2x2048x64xf32>) -> tensor<1x2x2048x64xf32>
    %103 = stablehlo.transpose %102, dims = [0, 2, 1, 3] {result_layout = dense<[3, 1, 2, 0]> : tensor<4xindex>, xla_shape = "f32[1,2048,2,64]{3,1,2,0}"} : (tensor<1x2x2048x64xf32>) -> tensor<1x2048x2x64xf32>
    %104 = stablehlo.reshape %103 : (tensor<1x2048x2x64xf32>) -> tensor<2048x128xf32>
    %105 = stablehlo.transpose %arg19, dims = [1, 0] {result_layout = dense<[0, 1]> : tensor<2xindex>, xla_shape = "f32[128,128]{0,1}"} : (tensor<128x128xf32>) -> tensor<128x128xf32>
    %106 = stablehlo.dot %104, %105, precision = [DEFAULT, DEFAULT] : (tensor<2048x128xf32>, tensor<128x128xf32>) -> tensor<2048x128xf32>
    %107 = stablehlo.add %9, %106 : tensor<2048x128xf32>
    %108 = stablehlo.power %107, %1 : tensor<2048x128xf32>
    %109 = stablehlo.reduce(%108 init: %7) across dimensions = [1] : (tensor<2048x128xf32>, tensor<f32>) -> tensor<2048xf32>
     reducer(%arg44: tensor<f32>, %arg45: tensor<f32>)  {
      %364 = stablehlo.add %arg44, %arg45 : tensor<f32>
      stablehlo.return %364 : tensor<f32>
    }
    %110 = stablehlo.multiply %109, %0 : tensor<2048xf32>
    %111 = stablehlo.reshape %110 : (tensor<2048xf32>) -> tensor<2048x1xf32>
    %112 = stablehlo.broadcast_in_dim %arg2, dims = [] : (tensor<f32>) -> tensor<2048x1xf32>
    %113 = stablehlo.add %111, %112 : tensor<2048x1xf32>
    %114 = stablehlo.rsqrt %113 : tensor<2048x1xf32>
    %115 = stablehlo.reshape %114 : (tensor<2048x1xf32>) -> tensor<2048xf32>
    %116 = stablehlo.broadcast_in_dim %115, dims = [0] : (tensor<2048xf32>) -> tensor<2048x128xf32>
    %117 = stablehlo.multiply %107, %116 : tensor<2048x128xf32>
    %118 = stablehlo.broadcast_in_dim %arg18, dims = [1] : (tensor<128xf32>) -> tensor<2048x128xf32>
    %119 = stablehlo.multiply %117, %118 : tensor<2048x128xf32>
    %120 = stablehlo.transpose %arg33, dims = [1, 0] {result_layout = dense<[0, 1]> : tensor<2xindex>, xla_shape = "f32[128,352]{0,1}"} : (tensor<352x128xf32>) -> tensor<128x352xf32>
    %121 = stablehlo.dot %119, %120, precision = [DEFAULT, DEFAULT] : (tensor<2048x128xf32>, tensor<128x352xf32>) -> tensor<2048x352xf32>
    %122 = stablehlo.logistic %121 : tensor<2048x352xf32>
    %123 = stablehlo.multiply %121, %122 : tensor<2048x352xf32>
    %124 = stablehlo.transpose %arg17, dims = [1, 0] {result_layout = dense<[0, 1]> : tensor<2xindex>, xla_shape = "f32[128,352]{0,1}"} : (tensor<352x128xf32>) -> tensor<128x352xf32>
    %125 = stablehlo.dot %119, %124, precision = [DEFAULT, DEFAULT] : (tensor<2048x128xf32>, tensor<128x352xf32>) -> tensor<2048x352xf32>
    %126 = stablehlo.multiply %123, %125 : tensor<2048x352xf32>
    %127 = stablehlo.transpose %arg16, dims = [1, 0] {result_layout = dense<[0, 1]> : tensor<2xindex>, xla_shape = "f32[352,128]{0,1}"} : (tensor<128x352xf32>) -> tensor<352x128xf32>
    %128 = stablehlo.dot %126, %127, precision = [DEFAULT, DEFAULT] : (tensor<2048x352xf32>, tensor<352x128xf32>) -> tensor<2048x128xf32>
    %129 = stablehlo.add %107, %128 : tensor<2048x128xf32>
    %130 = stablehlo.power %129, %1 : tensor<2048x128xf32>
    %131 = stablehlo.reduce(%130 init: %7) across dimensions = [1] : (tensor<2048x128xf32>, tensor<f32>) -> tensor<2048xf32>
     reducer(%arg44: tensor<f32>, %arg45: tensor<f32>)  {
      %364 = stablehlo.add %arg44, %arg45 : tensor<f32>
      stablehlo.return %364 : tensor<f32>
    }
    %132 = stablehlo.multiply %131, %0 : tensor<2048xf32>
    %133 = stablehlo.reshape %132 : (tensor<2048xf32>) -> tensor<2048x1xf32>
    %134 = stablehlo.broadcast_in_dim %arg2, dims = [] : (tensor<f32>) -> tensor<2048x1xf32>
    %135 = stablehlo.add %133, %134 : tensor<2048x1xf32>
    %136 = stablehlo.rsqrt %135 : tensor<2048x1xf32>
    %137 = stablehlo.reshape %136 : (tensor<2048x1xf32>) -> tensor<2048xf32>
    %138 = stablehlo.broadcast_in_dim %137, dims = [0] : (tensor<2048xf32>) -> tensor<2048x128xf32>
    %139 = stablehlo.multiply %129, %138 : tensor<2048x128xf32>
    %140 = stablehlo.broadcast_in_dim %arg15, dims = [1] : (tensor<128xf32>) -> tensor<2048x128xf32>
    %141 = stablehlo.multiply %139, %140 : tensor<2048x128xf32>
    %142 = stablehlo.transpose %arg37, dims = [1, 0] {result_layout = dense<[0, 1]> : tensor<2xindex>, xla_shape = "f32[128,128]{0,1}"} : (tensor<128x128xf32>) -> tensor<128x128xf32>
    %143 = stablehlo.dot %141, %142, precision = [DEFAULT, DEFAULT] : (tensor<2048x128xf32>, tensor<128x128xf32>) -> tensor<2048x128xf32>
    %144 = stablehlo.reshape %143 : (tensor<2048x128xf32>) -> tensor<2048x2x32x2xf32>
    %145 = stablehlo.slice %144 [0:2048, 0:2, 0:32, 0:1] : (tensor<2048x2x32x2xf32>) -> tensor<2048x2x32x1xf32>
    %146 = stablehlo.reshape %145 : (tensor<2048x2x32x1xf32>) -> tensor<2048x2x32xf32>
    %147 = stablehlo.slice %144 [0:2048, 0:2, 0:32, 1:2] : (tensor<2048x2x32x2xf32>) -> tensor<2048x2x32x1xf32>
    %148 = stablehlo.reshape %147 : (tensor<2048x2x32x1xf32>) -> tensor<2048x2x32xf32>
    %149 = stablehlo.complex %146, %148 : tensor<2048x2x32xcomplex<f32>>
    %150 = stablehlo.broadcast_in_dim %31, dims = [0, 2] : (tensor<2048x32xcomplex<f32>>) -> tensor<2048x2x32xcomplex<f32>>
    %151 = stablehlo.multiply %149, %150 : tensor<2048x2x32xcomplex<f32>>
    %152 = stablehlo.real %151 : (tensor<2048x2x32xcomplex<f32>>) -> tensor<2048x2x32xf32>
    %153 = stablehlo.reshape %152 : (tensor<2048x2x32xf32>) -> tensor<2048x2x32x1xf32>
    %154 = stablehlo.imag %151 : (tensor<2048x2x32xcomplex<f32>>) -> tensor<2048x2x32xf32>
    %155 = stablehlo.reshape %154 : (tensor<2048x2x32xf32>) -> tensor<2048x2x32x1xf32>
    %156 = stablehlo.concatenate %153, %155, dim = 3 : (tensor<2048x2x32x1xf32>, tensor<2048x2x32x1xf32>) -> tensor<2048x2x32x2xf32>
    %157 = stablehlo.reshape %156 : (tensor<2048x2x32x2xf32>) -> tensor<2048x2x64xf32>
    %158 = stablehlo.transpose %157, dims = [1, 0, 2] {result_layout = dense<[2, 0, 1]> : tensor<3xindex>, xla_shape = "f32[2,2048,64]{2,0,1}"} : (tensor<2048x2x64xf32>) -> tensor<2x2048x64xf32>
    %159 = stablehlo.compare  LT, %arg24, %2 : (tensor<2048xi64>, tensor<2048xi64>) -> tensor<2048xi1>
    %160 = stablehlo.broadcast_in_dim %arg25, dims = [] : (tensor<i64>) -> tensor<2048xi64>
    %161 = stablehlo.add %arg24, %160 : tensor<2048xi64>
    %162 = stablehlo.select %159, %161, %arg24 : tensor<2048xi1>, tensor<2048xi64>
    %163 = stablehlo.reshape %162 : (tensor<2048xi64>) -> tensor<2048x1xi64>
    %164 = stablehlo.transpose %arg35, dims = [1, 0] {result_layout = dense<[0, 1]> : tensor<2xindex>, xla_shape = "f32[128,128]{0,1}"} : (tensor<128x128xf32>) -> tensor<128x128xf32>
    %165 = stablehlo.dot %141, %164, precision = [DEFAULT, DEFAULT] : (tensor<2048x128xf32>, tensor<128x128xf32>) -> tensor<2048x128xf32>
    %166 = stablehlo.reshape %165 : (tensor<2048x128xf32>) -> tensor<2048x2x32x2xf32>
    %167 = stablehlo.slice %166 [0:2048, 0:2, 0:32, 0:1] : (tensor<2048x2x32x2xf32>) -> tensor<2048x2x32x1xf32>
    %168 = stablehlo.reshape %167 : (tensor<2048x2x32x1xf32>) -> tensor<2048x2x32xf32>
    %169 = stablehlo.slice %166 [0:2048, 0:2, 0:32, 1:2] : (tensor<2048x2x32x2xf32>) -> tensor<2048x2x32x1xf32>
    %170 = stablehlo.reshape %169 : (tensor<2048x2x32x1xf32>) -> tensor<2048x2x32xf32>
    %171 = stablehlo.complex %168, %170 : tensor<2048x2x32xcomplex<f32>>
    %172 = stablehlo.broadcast_in_dim %31, dims = [0, 2] : (tensor<2048x32xcomplex<f32>>) -> tensor<2048x2x32xcomplex<f32>>
    %173 = stablehlo.multiply %171, %172 : tensor<2048x2x32xcomplex<f32>>
    %174 = stablehlo.real %173 : (tensor<2048x2x32xcomplex<f32>>) -> tensor<2048x2x32xf32>
    %175 = stablehlo.reshape %174 : (tensor<2048x2x32xf32>) -> tensor<2048x2x32x1xf32>
    %176 = stablehlo.imag %173 : (tensor<2048x2x32xcomplex<f32>>) -> tensor<2048x2x32xf32>
    %177 = stablehlo.reshape %176 : (tensor<2048x2x32xf32>) -> tensor<2048x2x32x1xf32>
    %178 = stablehlo.concatenate %175, %177, dim = 3 : (tensor<2048x2x32x1xf32>, tensor<2048x2x32x1xf32>) -> tensor<2048x2x32x2xf32>
    %179 = stablehlo.reshape %178 : (tensor<2048x2x32x2xf32>) -> tensor<2048x2x64xf32>
    %180 = "stablehlo.scatter"(%arg36, %163, %179) ({
    ^bb0(%arg44: tensor<f32>, %arg45: tensor<f32>):
      stablehlo.return %arg45 : tensor<f32>
    }) {indices_are_sorted = false, scatter_dimension_numbers = #stablehlo.scatter<update_window_dims = [1, 2], inserted_window_dims = [0], scatter_dims_to_operand_dims = [0], index_vector_dim = 1>, unique_indices = false} : (tensor<2304x2x64xf32>, tensor<2048x1xi64>, tensor<2048x2x64xf32>) -> tensor<2304x2x64xf32>
    %181 = stablehlo.convert %arg7 : (tensor<2048xi64>) -> tensor<2048xui32>
    %182 = "stablehlo.gather"(%180, %181) {dimension_numbers = #stablehlo.gather<offset_dims = [1, 2], collapsed_slice_dims = [0], start_index_map = [0], index_vector_dim = 1>, indices_are_sorted = false, slice_sizes = dense<[1, 2, 64]> : tensor<3xi64>} : (tensor<2304x2x64xf32>, tensor<2048xui32>) -> tensor<2048x2x64xf32>
    %183 = stablehlo.transpose %182, dims = [1, 2, 0] : (tensor<2048x2x64xf32>) -> tensor<2x64x2048xf32>
    %184 = stablehlo.dot_general %158, %183, batching_dims = [0] x [0], contracting_dims = [2] x [1], precision = [DEFAULT, DEFAULT] : (tensor<2x2048x64xf32>, tensor<2x64x2048xf32>) -> tensor<2x2048x2048xf32>
    %185 = stablehlo.broadcast_in_dim %arg28, dims = [] : (tensor<f32>) -> tensor<2x2048x2048xf32>
    %186 = stablehlo.divide %184, %185 : tensor<2x2048x2048xf32>
    %187 = stablehlo.reshape %186 : (tensor<2x2048x2048xf32>) -> tensor<1x2x2048x2048xf32>
    %188 = stablehlo.reshape %77 : (tensor<1x1x2048x2048xf32>) -> tensor<1x2048x2048xf32>
    %189 = stablehlo.broadcast_in_dim %188, dims = [0, 2, 3] : (tensor<1x2048x2048xf32>) -> tensor<1x2x2048x2048xf32>
    %190 = stablehlo.add %187, %189 : tensor<1x2x2048x2048xf32>
    %191 = stablehlo.reduce(%190 init: %6) across dimensions = [3] : (tensor<1x2x2048x2048xf32>, tensor<f32>) -> tensor<1x2x2048xf32>
     reducer(%arg44: tensor<f32>, %arg45: tensor<f32>)  {
      %364 = stablehlo.maximum %arg44, %arg45 : tensor<f32>
      stablehlo.return %364 : tensor<f32>
    }
    %192 = stablehlo.broadcast_in_dim %191, dims = [0, 1, 2] : (tensor<1x2x2048xf32>) -> tensor<1x2x2048x2048xf32>
    %193 = stablehlo.subtract %190, %192 : tensor<1x2x2048x2048xf32>
    %194 = stablehlo.exponential %193 : tensor<1x2x2048x2048xf32>
    %195 = stablehlo.reduce(%194 init: %7) across dimensions = [3] : (tensor<1x2x2048x2048xf32>, tensor<f32>) -> tensor<1x2x2048xf32>
     reducer(%arg44: tensor<f32>, %arg45: tensor<f32>)  {
      %364 = stablehlo.add %arg44, %arg45 : tensor<f32>
      stablehlo.return %364 : tensor<f32>
    }
    %196 = stablehlo.broadcast_in_dim %195, dims = [0, 1, 2] : (tensor<1x2x2048xf32>) -> tensor<1x2x2048x2048xf32>
    %197 = stablehlo.divide %194, %196 : tensor<1x2x2048x2048xf32>
    %198 = stablehlo.reshape %197 : (tensor<1x2x2048x2048xf32>) -> tensor<2x2048x2048xf32>
    %199 = stablehlo.compare  LT, %arg24, %2 : (tensor<2048xi64>, tensor<2048xi64>) -> tensor<2048xi1>
    %200 = stablehlo.broadcast_in_dim %arg25, dims = [] : (tensor<i64>) -> tensor<2048xi64>
    %201 = stablehlo.add %arg24, %200 : tensor<2048xi64>
    %202 = stablehlo.select %199, %201, %arg24 : tensor<2048xi1>, tensor<2048xi64>
    %203 = stablehlo.reshape %202 : (tensor<2048xi64>) -> tensor<2048x1xi64>
    %204 = stablehlo.transpose %arg14, dims = [1, 0] {result_layout = dense<[0, 1]> : tensor<2xindex>, xla_shape = "f32[128,128]{0,1}"} : (tensor<128x128xf32>) -> tensor<128x128xf32>
    %205 = stablehlo.dot %141, %204, precision = [DEFAULT, DEFAULT] : (tensor<2048x128xf32>, tensor<128x128xf32>) -> tensor<2048x128xf32>
    %206 = stablehlo.reshape %205 : (tensor<2048x128xf32>) -> tensor<2048x2x64xf32>
    %207 = "stablehlo.scatter"(%arg34, %203, %206) ({
    ^bb0(%arg44: tensor<f32>, %arg45: tensor<f32>):
      stablehlo.return %arg45 : tensor<f32>
    }) {indices_are_sorted = false, scatter_dimension_numbers = #stablehlo.scatter<update_window_dims = [1, 2], inserted_window_dims = [0], scatter_dims_to_operand_dims = [0], index_vector_dim = 1>, unique_indices = false} : (tensor<2304x2x64xf32>, tensor<2048x1xi64>, tensor<2048x2x64xf32>) -> tensor<2304x2x64xf32>
    %208 = stablehlo.convert %arg7 : (tensor<2048xi64>) -> tensor<2048xui32>
    %209 = "stablehlo.gather"(%207, %208) {dimension_numbers = #stablehlo.gather<offset_dims = [1, 2], collapsed_slice_dims = [0], start_index_map = [0], index_vector_dim = 1>, indices_are_sorted = false, slice_sizes = dense<[1, 2, 64]> : tensor<3xi64>} : (tensor<2304x2x64xf32>, tensor<2048xui32>) -> tensor<2048x2x64xf32>
    %210 = stablehlo.transpose %209, dims = [1, 0, 2] {result_layout = dense<[2, 0, 1]> : tensor<3xindex>, xla_shape = "f32[2,2048,64]{2,0,1}"} : (tensor<2048x2x64xf32>) -> tensor<2x2048x64xf32>
    %211 = stablehlo.dot_general %198, %210, batching_dims = [0] x [0], contracting_dims = [2] x [1], precision = [DEFAULT, DEFAULT] : (tensor<2x2048x2048xf32>, tensor<2x2048x64xf32>) -> tensor<2x2048x64xf32>
    %212 = stablehlo.reshape %211 : (tensor<2x2048x64xf32>) -> tensor<1x2x2048x64xf32>
    %213 = stablehlo.transpose %212, dims = [0, 2, 1, 3] {result_layout = dense<[3, 1, 2, 0]> : tensor<4xindex>, xla_shape = "f32[1,2048,2,64]{3,1,2,0}"} : (tensor<1x2x2048x64xf32>) -> tensor<1x2048x2x64xf32>
    %214 = stablehlo.reshape %213 : (tensor<1x2048x2x64xf32>) -> tensor<2048x128xf32>
    %215 = stablehlo.transpose %arg13, dims = [1, 0] {result_layout = dense<[0, 1]> : tensor<2xindex>, xla_shape = "f32[128,128]{0,1}"} : (tensor<128x128xf32>) -> tensor<128x128xf32>
    %216 = stablehlo.dot %214, %215, precision = [DEFAULT, DEFAULT] : (tensor<2048x128xf32>, tensor<128x128xf32>) -> tensor<2048x128xf32>
    %217 = stablehlo.add %129, %216 : tensor<2048x128xf32>
    %218 = stablehlo.power %217, %1 : tensor<2048x128xf32>
    %219 = stablehlo.reduce(%218 init: %7) across dimensions = [1] : (tensor<2048x128xf32>, tensor<f32>) -> tensor<2048xf32>
     reducer(%arg44: tensor<f32>, %arg45: tensor<f32>)  {
      %364 = stablehlo.add %arg44, %arg45 : tensor<f32>
      stablehlo.return %364 : tensor<f32>
    }
    %220 = stablehlo.multiply %219, %0 : tensor<2048xf32>
    %221 = stablehlo.reshape %220 : (tensor<2048xf32>) -> tensor<2048x1xf32>
    %222 = stablehlo.broadcast_in_dim %arg2, dims = [] : (tensor<f32>) -> tensor<2048x1xf32>
    %223 = stablehlo.add %221, %222 : tensor<2048x1xf32>
    %224 = stablehlo.rsqrt %223 : tensor<2048x1xf32>
    %225 = stablehlo.reshape %224 : (tensor<2048x1xf32>) -> tensor<2048xf32>
    %226 = stablehlo.broadcast_in_dim %225, dims = [0] : (tensor<2048xf32>) -> tensor<2048x128xf32>
    %227 = stablehlo.multiply %217, %226 : tensor<2048x128xf32>
    %228 = stablehlo.broadcast_in_dim %arg12, dims = [1] : (tensor<128xf32>) -> tensor<2048x128xf32>
    %229 = stablehlo.multiply %227, %228 : tensor<2048x128xf32>
    %230 = stablehlo.transpose %arg38, dims = [1, 0] {result_layout = dense<[0, 1]> : tensor<2xindex>, xla_shape = "f32[128,352]{0,1}"} : (tensor<352x128xf32>) -> tensor<128x352xf32>
    %231 = stablehlo.dot %229, %230, precision = [DEFAULT, DEFAULT] : (tensor<2048x128xf32>, tensor<128x352xf32>) -> tensor<2048x352xf32>
    %232 = stablehlo.logistic %231 : tensor<2048x352xf32>
    %233 = stablehlo.multiply %231, %232 : tensor<2048x352xf32>
    %234 = stablehlo.transpose %arg11, dims = [1, 0] {result_layout = dense<[0, 1]> : tensor<2xindex>, xla_shape = "f32[128,352]{0,1}"} : (tensor<352x128xf32>) -> tensor<128x352xf32>
    %235 = stablehlo.dot %229, %234, precision = [DEFAULT, DEFAULT] : (tensor<2048x128xf32>, tensor<128x352xf32>) -> tensor<2048x352xf32>
    %236 = stablehlo.multiply %233, %235 : tensor<2048x352xf32>
    %237 = stablehlo.transpose %arg10, dims = [1, 0] {result_layout = dense<[0, 1]> : tensor<2xindex>, xla_shape = "f32[352,128]{0,1}"} : (tensor<128x352xf32>) -> tensor<352x128xf32>
    %238 = stablehlo.dot %236, %237, precision = [DEFAULT, DEFAULT] : (tensor<2048x352xf32>, tensor<352x128xf32>) -> tensor<2048x128xf32>
    %239 = stablehlo.add %217, %238 : tensor<2048x128xf32>
    %240 = stablehlo.power %239, %1 : tensor<2048x128xf32>
    %241 = stablehlo.reduce(%240 init: %7) across dimensions = [1] : (tensor<2048x128xf32>, tensor<f32>) -> tensor<2048xf32>
     reducer(%arg44: tensor<f32>, %arg45: tensor<f32>)  {
      %364 = stablehlo.add %arg44, %arg45 : tensor<f32>
      stablehlo.return %364 : tensor<f32>
    }
    %242 = stablehlo.multiply %241, %0 : tensor<2048xf32>
    %243 = stablehlo.reshape %242 : (tensor<2048xf32>) -> tensor<2048x1xf32>
    %244 = stablehlo.broadcast_in_dim %arg2, dims = [] : (tensor<f32>) -> tensor<2048x1xf32>
    %245 = stablehlo.add %243, %244 : tensor<2048x1xf32>
    %246 = stablehlo.rsqrt %245 : tensor<2048x1xf32>
    %247 = stablehlo.reshape %246 : (tensor<2048x1xf32>) -> tensor<2048xf32>
    %248 = stablehlo.broadcast_in_dim %247, dims = [0] : (tensor<2048xf32>) -> tensor<2048x128xf32>
    %249 = stablehlo.multiply %239, %248 : tensor<2048x128xf32>
    %250 = stablehlo.broadcast_in_dim %arg9, dims = [1] : (tensor<128xf32>) -> tensor<2048x128xf32>
    %251 = stablehlo.multiply %249, %250 : tensor<2048x128xf32>
    %252 = stablehlo.transpose %arg42, dims = [1, 0] {result_layout = dense<[0, 1]> : tensor<2xindex>, xla_shape = "f32[128,128]{0,1}"} : (tensor<128x128xf32>) -> tensor<128x128xf32>
    %253 = stablehlo.dot %251, %252, precision = [DEFAULT, DEFAULT] : (tensor<2048x128xf32>, tensor<128x128xf32>) -> tensor<2048x128xf32>
    %254 = stablehlo.reshape %253 : (tensor<2048x128xf32>) -> tensor<2048x2x32x2xf32>
    %255 = stablehlo.slice %254 [0:2048, 0:2, 0:32, 0:1] : (tensor<2048x2x32x2xf32>) -> tensor<2048x2x32x1xf32>
    %256 = stablehlo.reshape %255 : (tensor<2048x2x32x1xf32>) -> tensor<2048x2x32xf32>
    %257 = stablehlo.slice %254 [0:2048, 0:2, 0:32, 1:2] : (tensor<2048x2x32x2xf32>) -> tensor<2048x2x32x1xf32>
    %258 = stablehlo.reshape %257 : (tensor<2048x2x32x1xf32>) -> tensor<2048x2x32xf32>
    %259 = stablehlo.complex %256, %258 : tensor<2048x2x32xcomplex<f32>>
    %260 = stablehlo.broadcast_in_dim %31, dims = [0, 2] : (tensor<2048x32xcomplex<f32>>) -> tensor<2048x2x32xcomplex<f32>>
    %261 = stablehlo.multiply %259, %260 : tensor<2048x2x32xcomplex<f32>>
    %262 = stablehlo.real %261 : (tensor<2048x2x32xcomplex<f32>>) -> tensor<2048x2x32xf32>
    %263 = stablehlo.reshape %262 : (tensor<2048x2x32xf32>) -> tensor<2048x2x32x1xf32>
    %264 = stablehlo.imag %261 : (tensor<2048x2x32xcomplex<f32>>) -> tensor<2048x2x32xf32>
    %265 = stablehlo.reshape %264 : (tensor<2048x2x32xf32>) -> tensor<2048x2x32x1xf32>
    %266 = stablehlo.concatenate %263, %265, dim = 3 : (tensor<2048x2x32x1xf32>, tensor<2048x2x32x1xf32>) -> tensor<2048x2x32x2xf32>
    %267 = stablehlo.reshape %266 : (tensor<2048x2x32x2xf32>) -> tensor<2048x2x64xf32>
    %268 = stablehlo.transpose %267, dims = [1, 0, 2] {result_layout = dense<[2, 0, 1]> : tensor<3xindex>, xla_shape = "f32[2,2048,64]{2,0,1}"} : (tensor<2048x2x64xf32>) -> tensor<2x2048x64xf32>
    %269 = stablehlo.compare  LT, %arg24, %2 : (tensor<2048xi64>, tensor<2048xi64>) -> tensor<2048xi1>
    %270 = stablehlo.broadcast_in_dim %arg25, dims = [] : (tensor<i64>) -> tensor<2048xi64>
    %271 = stablehlo.add %arg24, %270 : tensor<2048xi64>
    %272 = stablehlo.select %269, %271, %arg24 : tensor<2048xi1>, tensor<2048xi64>
    %273 = stablehlo.reshape %272 : (tensor<2048xi64>) -> tensor<2048x1xi64>
    %274 = stablehlo.transpose %arg40, dims = [1, 0] {result_layout = dense<[0, 1]> : tensor<2xindex>, xla_shape = "f32[128,128]{0,1}"} : (tensor<128x128xf32>) -> tensor<128x128xf32>
    %275 = stablehlo.dot %251, %274, precision = [DEFAULT, DEFAULT] : (tensor<2048x128xf32>, tensor<128x128xf32>) -> tensor<2048x128xf32>
    %276 = stablehlo.reshape %275 : (tensor<2048x128xf32>) -> tensor<2048x2x32x2xf32>
    %277 = stablehlo.slice %276 [0:2048, 0:2, 0:32, 0:1] : (tensor<2048x2x32x2xf32>) -> tensor<2048x2x32x1xf32>
    %278 = stablehlo.reshape %277 : (tensor<2048x2x32x1xf32>) -> tensor<2048x2x32xf32>
    %279 = stablehlo.slice %276 [0:2048, 0:2, 0:32, 1:2] : (tensor<2048x2x32x2xf32>) -> tensor<2048x2x32x1xf32>
    %280 = stablehlo.reshape %279 : (tensor<2048x2x32x1xf32>) -> tensor<2048x2x32xf32>
    %281 = stablehlo.complex %278, %280 : tensor<2048x2x32xcomplex<f32>>
    %282 = stablehlo.broadcast_in_dim %31, dims = [0, 2] : (tensor<2048x32xcomplex<f32>>) -> tensor<2048x2x32xcomplex<f32>>
    %283 = stablehlo.multiply %281, %282 : tensor<2048x2x32xcomplex<f32>>
    %284 = stablehlo.real %283 : (tensor<2048x2x32xcomplex<f32>>) -> tensor<2048x2x32xf32>
    %285 = stablehlo.reshape %284 : (tensor<2048x2x32xf32>) -> tensor<2048x2x32x1xf32>
    %286 = stablehlo.imag %283 : (tensor<2048x2x32xcomplex<f32>>) -> tensor<2048x2x32xf32>
    %287 = stablehlo.reshape %286 : (tensor<2048x2x32xf32>) -> tensor<2048x2x32x1xf32>
    %288 = stablehlo.concatenate %285, %287, dim = 3 : (tensor<2048x2x32x1xf32>, tensor<2048x2x32x1xf32>) -> tensor<2048x2x32x2xf32>
    %289 = stablehlo.reshape %288 : (tensor<2048x2x32x2xf32>) -> tensor<2048x2x64xf32>
    %290 = "stablehlo.scatter"(%arg41, %273, %289) ({
    ^bb0(%arg44: tensor<f32>, %arg45: tensor<f32>):
      stablehlo.return %arg45 : tensor<f32>
    }) {indices_are_sorted = false, scatter_dimension_numbers = #stablehlo.scatter<update_window_dims = [1, 2], inserted_window_dims = [0], scatter_dims_to_operand_dims = [0], index_vector_dim = 1>, unique_indices = false} : (tensor<2304x2x64xf32>, tensor<2048x1xi64>, tensor<2048x2x64xf32>) -> tensor<2304x2x64xf32>
    %291 = stablehlo.convert %arg7 : (tensor<2048xi64>) -> tensor<2048xui32>
    %292 = "stablehlo.gather"(%290, %291) {dimension_numbers = #stablehlo.gather<offset_dims = [1, 2], collapsed_slice_dims = [0], start_index_map = [0], index_vector_dim = 1>, indices_are_sorted = false, slice_sizes = dense<[1, 2, 64]> : tensor<3xi64>} : (tensor<2304x2x64xf32>, tensor<2048xui32>) -> tensor<2048x2x64xf32>
    %293 = stablehlo.transpose %292, dims = [1, 2, 0] : (tensor<2048x2x64xf32>) -> tensor<2x64x2048xf32>
    %294 = stablehlo.dot_general %268, %293, batching_dims = [0] x [0], contracting_dims = [2] x [1], precision = [DEFAULT, DEFAULT] : (tensor<2x2048x64xf32>, tensor<2x64x2048xf32>) -> tensor<2x2048x2048xf32>
    %295 = stablehlo.broadcast_in_dim %arg28, dims = [] : (tensor<f32>) -> tensor<2x2048x2048xf32>
    %296 = stablehlo.divide %294, %295 : tensor<2x2048x2048xf32>
    %297 = stablehlo.reshape %296 : (tensor<2x2048x2048xf32>) -> tensor<1x2x2048x2048xf32>
    %298 = stablehlo.reshape %77 : (tensor<1x1x2048x2048xf32>) -> tensor<1x2048x2048xf32>
    %299 = stablehlo.broadcast_in_dim %298, dims = [0, 2, 3] : (tensor<1x2048x2048xf32>) -> tensor<1x2x2048x2048xf32>
    %300 = stablehlo.add %297, %299 : tensor<1x2x2048x2048xf32>
    %301 = stablehlo.reduce(%300 init: %6) across dimensions = [3] : (tensor<1x2x2048x2048xf32>, tensor<f32>) -> tensor<1x2x2048xf32>
     reducer(%arg44: tensor<f32>, %arg45: tensor<f32>)  {
      %364 = stablehlo.maximum %arg44, %arg45 : tensor<f32>
      stablehlo.return %364 : tensor<f32>
    }
    %302 = stablehlo.broadcast_in_dim %301, dims = [0, 1, 2] : (tensor<1x2x2048xf32>) -> tensor<1x2x2048x2048xf32>
    %303 = stablehlo.subtract %300, %302 : tensor<1x2x2048x2048xf32>
    %304 = stablehlo.exponential %303 : tensor<1x2x2048x2048xf32>
    %305 = stablehlo.reduce(%304 init: %7) across dimensions = [3] : (tensor<1x2x2048x2048xf32>, tensor<f32>) -> tensor<1x2x2048xf32>
     reducer(%arg44: tensor<f32>, %arg45: tensor<f32>)  {
      %364 = stablehlo.add %arg44, %arg45 : tensor<f32>
      stablehlo.return %364 : tensor<f32>
    }
    %306 = stablehlo.broadcast_in_dim %305, dims = [0, 1, 2] : (tensor<1x2x2048xf32>) -> tensor<1x2x2048x2048xf32>
    %307 = stablehlo.divide %304, %306 : tensor<1x2x2048x2048xf32>
    %308 = stablehlo.reshape %307 : (tensor<1x2x2048x2048xf32>) -> tensor<2x2048x2048xf32>
    %309 = stablehlo.compare  LT, %arg24, %2 : (tensor<2048xi64>, tensor<2048xi64>) -> tensor<2048xi1>
    %310 = stablehlo.broadcast_in_dim %arg25, dims = [] : (tensor<i64>) -> tensor<2048xi64>
    %311 = stablehlo.add %arg24, %310 : tensor<2048xi64>
    %312 = stablehlo.select %309, %311, %arg24 : tensor<2048xi1>, tensor<2048xi64>
    %313 = stablehlo.reshape %312 : (tensor<2048xi64>) -> tensor<2048x1xi64>
    %314 = stablehlo.transpose %arg8, dims = [1, 0] {result_layout = dense<[0, 1]> : tensor<2xindex>, xla_shape = "f32[128,128]{0,1}"} : (tensor<128x128xf32>) -> tensor<128x128xf32>
    %315 = stablehlo.dot %251, %314, precision = [DEFAULT, DEFAULT] : (tensor<2048x128xf32>, tensor<128x128xf32>) -> tensor<2048x128xf32>
    %316 = stablehlo.reshape %315 : (tensor<2048x128xf32>) -> tensor<2048x2x64xf32>
    %317 = "stablehlo.scatter"(%arg39, %313, %316) ({
    ^bb0(%arg44: tensor<f32>, %arg45: tensor<f32>):
      stablehlo.return %arg45 : tensor<f32>
    }) {indices_are_sorted = false, scatter_dimension_numbers = #stablehlo.scatter<update_window_dims = [1, 2], inserted_window_dims = [0], scatter_dims_to_operand_dims = [0], index_vector_dim = 1>, unique_indices = false} : (tensor<2304x2x64xf32>, tensor<2048x1xi64>, tensor<2048x2x64xf32>) -> tensor<2304x2x64xf32>
    %318 = stablehlo.convert %arg7 : (tensor<2048xi64>) -> tensor<2048xui32>
    %319 = "stablehlo.gather"(%317, %318) {dimension_numbers = #stablehlo.gather<offset_dims = [1, 2], collapsed_slice_dims = [0], start_index_map = [0], index_vector_dim = 1>, indices_are_sorted = false, slice_sizes = dense<[1, 2, 64]> : tensor<3xi64>} : (tensor<2304x2x64xf32>, tensor<2048xui32>) -> tensor<2048x2x64xf32>
    %320 = stablehlo.transpose %319, dims = [1, 0, 2] {result_layout = dense<[2, 0, 1]> : tensor<3xindex>, xla_shape = "f32[2,2048,64]{2,0,1}"} : (tensor<2048x2x64xf32>) -> tensor<2x2048x64xf32>
    %321 = stablehlo.dot_general %308, %320, batching_dims = [0] x [0], contracting_dims = [2] x [1], precision = [DEFAULT, DEFAULT] : (tensor<2x2048x2048xf32>, tensor<2x2048x64xf32>) -> tensor<2x2048x64xf32>
    %322 = stablehlo.reshape %321 : (tensor<2x2048x64xf32>) -> tensor<1x2x2048x64xf32>
    %323 = stablehlo.transpose %322, dims = [0, 2, 1, 3] {result_layout = dense<[3, 1, 2, 0]> : tensor<4xindex>, xla_shape = "f32[1,2048,2,64]{3,1,2,0}"} : (tensor<1x2x2048x64xf32>) -> tensor<1x2048x2x64xf32>
    %324 = stablehlo.reshape %323 : (tensor<1x2048x2x64xf32>) -> tensor<2048x128xf32>
    %325 = stablehlo.transpose %arg6, dims = [1, 0] {result_layout = dense<[0, 1]> : tensor<2xindex>, xla_shape = "f32[128,128]{0,1}"} : (tensor<128x128xf32>) -> tensor<128x128xf32>
    %326 = stablehlo.dot %324, %325, precision = [DEFAULT, DEFAULT] : (tensor<2048x128xf32>, tensor<128x128xf32>) -> tensor<2048x128xf32>
    %327 = stablehlo.add %239, %326 : tensor<2048x128xf32>
    %328 = stablehlo.power %327, %1 : tensor<2048x128xf32>
    %329 = stablehlo.reduce(%328 init: %7) across dimensions = [1] : (tensor<2048x128xf32>, tensor<f32>) -> tensor<2048xf32>
     reducer(%arg44: tensor<f32>, %arg45: tensor<f32>)  {
      %364 = stablehlo.add %arg44, %arg45 : tensor<f32>
      stablehlo.return %364 : tensor<f32>
    }
    %330 = stablehlo.multiply %329, %0 : tensor<2048xf32>
    %331 = stablehlo.reshape %330 : (tensor<2048xf32>) -> tensor<2048x1xf32>
    %332 = stablehlo.broadcast_in_dim %arg2, dims = [] : (tensor<f32>) -> tensor<2048x1xf32>
    %333 = stablehlo.add %331, %332 : tensor<2048x1xf32>
    %334 = stablehlo.rsqrt %333 : tensor<2048x1xf32>
    %335 = stablehlo.reshape %334 : (tensor<2048x1xf32>) -> tensor<2048xf32>
    %336 = stablehlo.broadcast_in_dim %335, dims = [0] : (tensor<2048xf32>) -> tensor<2048x128xf32>
    %337 = stablehlo.multiply %327, %336 : tensor<2048x128xf32>
    %338 = stablehlo.broadcast_in_dim %arg5, dims = [1] : (tensor<128xf32>) -> tensor<2048x128xf32>
    %339 = stablehlo.multiply %337, %338 : tensor<2048x128xf32>
    %340 = stablehlo.transpose %arg43, dims = [1, 0] {result_layout = dense<[0, 1]> : tensor<2xindex>, xla_shape = "f32[128,352]{0,1}"} : (tensor<352x128xf32>) -> tensor<128x352xf32>
    %341 = stablehlo.dot %339, %340, precision = [DEFAULT, DEFAULT] : (tensor<2048x128xf32>, tensor<128x352xf32>) -> tensor<2048x352xf32>
    %342 = stablehlo.logistic %341 : tensor<2048x352xf32>
    %343 = stablehlo.multiply %341, %342 : tensor<2048x352xf32>
    %344 = stablehlo.transpose %arg4, dims = [1, 0] {result_layout = dense<[0, 1]> : tensor<2xindex>, xla_shape = "f32[128,352]{0,1}"} : (tensor<352x128xf32>) -> tensor<128x352xf32>
    %345 = stablehlo.dot %339, %344, precision = [DEFAULT, DEFAULT] : (tensor<2048x128xf32>, tensor<128x352xf32>) -> tensor<2048x352xf32>
    %346 = stablehlo.multiply %343, %345 : tensor<2048x352xf32>
    %347 = stablehlo.transpose %arg3, dims = [1, 0] {result_layout = dense<[0, 1]> : tensor<2xindex>, xla_shape = "f32[352,128]{0,1}"} : (tensor<128x352xf32>) -> tensor<352x128xf32>
    %348 = stablehlo.dot %346, %347, precision = [DEFAULT, DEFAULT] : (tensor<2048x352xf32>, tensor<352x128xf32>) -> tensor<2048x128xf32>
    %349 = stablehlo.add %327, %348 : tensor<2048x128xf32>
    %350 = stablehlo.power %349, %1 : tensor<2048x128xf32>
    %351 = stablehlo.reduce(%350 init: %7) across dimensions = [1] : (tensor<2048x128xf32>, tensor<f32>) -> tensor<2048xf32>
     reducer(%arg44: tensor<f32>, %arg45: tensor<f32>)  {
      %364 = stablehlo.add %arg44, %arg45 : tensor<f32>
      stablehlo.return %364 : tensor<f32>
    }
    %352 = stablehlo.multiply %351, %0 : tensor<2048xf32>
    %353 = stablehlo.reshape %352 : (tensor<2048xf32>) -> tensor<2048x1xf32>
    %354 = stablehlo.broadcast_in_dim %arg2, dims = [] : (tensor<f32>) -> tensor<2048x1xf32>
    %355 = stablehlo.add %353, %354 : tensor<2048x1xf32>
    %356 = stablehlo.rsqrt %355 : tensor<2048x1xf32>
    %357 = stablehlo.reshape %356 : (tensor<2048x1xf32>) -> tensor<2048xf32>
    %358 = stablehlo.broadcast_in_dim %357, dims = [0] : (tensor<2048xf32>) -> tensor<2048x128xf32>
    %359 = stablehlo.multiply %349, %358 : tensor<2048x128xf32>
    %360 = stablehlo.broadcast_in_dim %arg1, dims = [1] : (tensor<128xf32>) -> tensor<2048x128xf32>
    %361 = stablehlo.multiply %359, %360 : tensor<2048x128xf32>
    %362 = stablehlo.transpose %arg0, dims = [1, 0] {result_layout = dense<[0, 1]> : tensor<2xindex>, xla_shape = "f32[128,32000]{0,1}"} : (tensor<32000x128xf32>) -> tensor<128x32000xf32>
    %363 = stablehlo.dot %361, %362, precision = [DEFAULT, DEFAULT] : (tensor<2048x128xf32>, tensor<128x32000xf32>) -> tensor<2048x32000xf32>
    return %363, %62, %97, %180, %207, %290, %317 : tensor<2048x32000xf32>, tensor<2304x2x64xf32>, tensor<2304x2x64xf32>, tensor<2304x2x64xf32>, tensor<2304x2x64xf32>, tensor<2304x2x64xf32>, tensor<2304x2x64xf32>
  }
}
